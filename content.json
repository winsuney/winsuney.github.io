[{"title":"Golang加密系列之AES/CBC/PKCS7Padding","date":"2017-04-11T02:16:03.000Z","path":"2017/04/11/感慨一下/","text":"加密代码：Encrypt(plantText, key []byte) ([]byte, error) &#123;12345678910111213141516171819 block, err := aes.NewCipher(key) //选择加密算法 if err != nil &#123; return nil, err &#125; plantText = PKCS7Padding(plantText, block.BlockSize()) blockModel := cipher.NewCBCEncrypter(block, key) ciphertext := make([]byte, len(plantText)) blockModel.CryptBlocks(ciphertext, plantText) return ciphertext, nil&#125;func PKCS7Padding(ciphertext []byte, blockSize int) []byte &#123; padding := blockSize - len(ciphertext)%blockSize padtext := bytes.Repeat([]byte&#123;byte(padding)&#125;, padding) return append(ciphertext, padtext...)&#125; 解密代码：Decrypt(ciphertext, key []byte) ([]byte, error) &#123;1234567891011121314151617 keyBytes := []byte(key) block, err := aes.NewCipher(keyBytes) //选择加密算法 if err != nil &#123; return nil, err &#125; blockModel := cipher.NewCBCDecrypter(block, keyBytes) plantText := make([]byte, len(ciphertext)) blockModel.CryptBlocks(plantText, ciphertext) plantText = PKCS7UnPadding(plantText, block.BlockSize()) return plantText, nil&#125;func PKCS7UnPadding(plantText []byte, blockSize int) []byte &#123; length := len(plantText) unpadding := int(plantText[length-1]) return plantText[:(length - unpadding)]&#125;","tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/心情/"}]},{"title":"hexo 搭建个人博客","date":"2017-04-06T08:25:41.000Z","path":"2017/04/06/hexo/","text":"创建文章1$ hexo new \"My New Post\" More info: Writing 运行服务1$ hexo server More info: Server 生成静态页面1$ hexo generate More info: Generating 远程部署1$ hexo deploy More info: Deployment","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]